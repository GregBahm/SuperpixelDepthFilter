#pragma kernel CellSetup
#pragma kernel PixelAssignment
#pragma kernel ClearDepthData

#define DepthImageWidth 512
#define DepthImageHeight 424

struct CellBasisData
{
	float3 Color;
	float2 Pos;
};

int _SourceImageWidth;
int _SourceImageHeight;

RWStructuredBuffer<CellBasisData> _CellBasisBuffer;
RWStructuredBuffer<float2> _CellStartingPoints;
Texture2D SourceImage;
SamplerState samplerSourceImage;

[numthreads(64,1,1)]
void CellSetup (uint3 id : SV_DispatchThreadID)
{
	float xOffset = 1.0 / _SourceImageWidth;
	float yOffset = 1.0 / _SourceImageWidth;
	float2 uvs = _CellStartingPoints[id.x];
	float4 val = SourceImage.SampleLevel(samplerSourceImage, uvs, 0);

	//TODO: Sample neighbors and ease it away from edges.

	CellBasisData ret;
	ret.Color = val.xyz; 
	ret.Pos = uvs;
	_CellBasisBuffer[id.x] = ret;
}

struct CellsAroundPixel
{
	int Cells[9];
};

RWStructuredBuffer<CellsAroundPixel> _CellsAroundPixelBuffer;
RWStructuredBuffer<int> _ResultsBuffer;

float2 IndexToUvs(uint index)
{
	int y = (index / _SourceImageWidth) % _SourceImageHeight;
	int x = index % _SourceImageWidth;
	float retX = (float)x / _SourceImageWidth;
	float retY = (float)y / _SourceImageHeight;
	return float2(retX, retY);
}

float GetDist(float2 pixelPos, float3 pixelVal, CellBasisData cellData)
{
	float pixelDist = length(pixelVal - cellData.Color);
	pixelDist = pow(pixelDist, 1);
	float posDist = length(pixelPos - cellData.Pos);
	return  posDist + pixelDist;
}

struct CellDepthData
{
	int TotalDepth;
	int PixelsInCell;
};

RWStructuredBuffer<CellDepthData> _CellDepthsBuffer;
Buffer<float2> _DepthMappings;
Buffer<int> _DepthData;

int UvsToDepthImageIndex(float2 uv)
{
	int x = uv.x * DepthImageWidth;
	int y = uv.y * DepthImageHeight;
	return x + y * DepthImageWidth;
}

[numthreads(64, 1, 1)]
void PixelAssignment(uint3 id : SV_DispatchThreadID)
{
	CellsAroundPixel cellsAroundMe = _CellsAroundPixelBuffer[id.x];
	float2 uvs = IndexToUvs(id.x);
	float4 pixelVal = SourceImage.SampleLevel(samplerSourceImage, uvs, 0);
	float closestDist = 10000;
	int winningCell = 0;
	for (int i = 0; i < 9; i++)
	{
		int cellIndex = cellsAroundMe.Cells[i];
		CellBasisData cellData = _CellBasisBuffer[cellIndex];
		float dist = GetDist(uvs, pixelVal.xyz, cellData);
		if (dist < closestDist)
		{
			closestDist = dist;
			winningCell = cellIndex;
		}
	}
	_ResultsBuffer[id.x] = winningCell;

	float2 mappedDepthCoords = _DepthMappings[id.x] / float2(DepthImageWidth, DepthImageHeight);
	int depthIndex = UvsToDepthImageIndex(mappedDepthCoords);
	int depthVal = _DepthData[depthIndex];

	if (depthVal > 0)
	{
		//depthVal /= 100; // TODO: Depth val is going to blow out, so figure out an intelligent way to handle this.
		InterlockedAdd(_CellDepthsBuffer[winningCell].TotalDepth, depthVal);
		InterlockedAdd(_CellDepthsBuffer[winningCell].PixelsInCell, 1);
	}
}


[numthreads(64, 1, 1)]
void ClearDepthData(uint3 id : SV_DispatchThreadID)
{
	_CellDepthsBuffer[id.x] = (CellDepthData)0;
}
